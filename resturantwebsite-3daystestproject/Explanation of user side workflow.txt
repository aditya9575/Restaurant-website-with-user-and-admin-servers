when app loads we see sign up component which takes in user data and hits the signup api provided by firebase 
and this signup rest api of firebase then returns a local id which we store to maintain a unique user and identify his interactions 
(The local ID returned in the response when hitting the Firebase REST API for signup using a custom email and password is 
a unique identifier generated by Firebase for that specific user account. It's a string of characters that serves as a primary key 
for the user record in the Firebase Realtime Database.)

then after destructuring that local id we make a storeuserdataobject 
 await storeUserData({
        restaurantName: formData.restaurantName,
        mobileNumber: formData.mobileNumber,
        email: formData.email,
        userId: localId,
      });

and make a post call again to create user in the realtime database       

then we make a call to send email verification link to the user's entered mail address and display a pop to check mail and verify
------------------------------------------------------------------------------------------------------------------------------------- 

Now comes the login form it takes email and password and sends a post request to firebase's rest api for login 
and from the response we destructure the idtoken and local id (previously stored while signup)
->const { idToken, localId } = response.data;

then we send a post request to firebase's getuserdata url with our id token and this checks if that user exists in our realtime db 
and from the response returned we check if the email is verified and if not verified we display a message of verify the email first 
and stop the login process but if found verified we store token :id token and user id :local id in our session storage to further 
use them for our routing and authentication and specific user management purpose 
->
   sessionStorage.setItem('token', idToken);  
      sessionStorage.setItem('userId', localId);

then we 